{"version":3,"file":"color2name.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,aAAc,GAAIH,GACC,iBAAZC,QACdA,QAAoB,WAAID,IAExBD,EAAiB,WAAIC,GACtB,CATD,CASGK,MAAM,I,mBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFT,EAAyBL,IACH,oBAAXkB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeV,EAASkB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeV,EAAS,aAAc,CAAEoB,OAAO,GAAO,G,oECs3B9D,QA33BmC,CACjC,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,gBAEF,CACE,EACA,IACA,IACA,QAEF,CACE,IACA,IACA,IACA,cAEF,CACE,IACA,IACA,IACA,SAEF,CACE,IACA,IACA,IACA,SAEF,CACE,IACA,IACA,IACA,UAEF,CACE,EACA,EACA,EACA,SAEF,CACE,IACA,IACA,IACA,kBAEF,CACE,EACA,EACA,IACA,QAEF,CACE,IACA,GACA,IACA,cAEF,CACE,IACA,GACA,GACA,SAEF,CACE,IACA,IACA,IACA,aAEF,CACE,GACA,IACA,IACA,aAEF,CACE,IACA,IACA,EACA,cAEF,CACE,IACA,IACA,GACA,aAEF,CACE,IACA,IACA,GACA,SAEF,CACE,IACA,IACA,IACA,kBAEF,CACE,IACA,IACA,IACA,YAEF,CACE,IACA,GACA,GACA,WAEF,CACE,EACA,IACA,IACA,QAEF,CACE,EACA,EACA,IACA,YAEF,CACE,EACA,IACA,IACA,YAEF,CACE,IACA,IACA,GACA,iBAEF,CACE,IACA,IACA,IACA,YAEF,CACE,EACA,IACA,EACA,aAEF,CACE,IACA,IACA,IACA,YAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,EACA,IACA,eAEF,CACE,GACA,IACA,GACA,kBAEF,CACE,IACA,IACA,EACA,cAEF,CACE,IACA,GACA,IACA,cAEF,CACE,IACA,EACA,EACA,WAEF,CACE,IACA,IACA,IACA,cAEF,CACE,IACA,IACA,IACA,gBAEF,CACE,GACA,GACA,IACA,iBAEF,CACE,GACA,GACA,GACA,iBAEF,CACE,GACA,GACA,GACA,iBAEF,CACE,EACA,IACA,IACA,iBAEF,CACE,IACA,EACA,IACA,cAEF,CACE,IACA,GACA,IACA,YAEF,CACE,EACA,IACA,IACA,eAEF,CACE,IACA,IACA,IACA,WAEF,CACE,IACA,IACA,IACA,WAEF,CACE,GACA,IACA,IACA,cAEF,CACE,IACA,GACA,GACA,aAEF,CACE,IACA,IACA,IACA,eAEF,CACE,GACA,IACA,GACA,eAEF,CACE,IACA,EACA,IACA,WAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,cAEF,CACE,IACA,IACA,EACA,QAEF,CACE,IACA,IACA,GACA,aAEF,CACE,IACA,IACA,IACA,QAEF,CACE,EACA,IACA,EACA,SAEF,CACE,IACA,IACA,GACA,eAEF,CACE,IACA,IACA,IACA,QAEF,CACE,IACA,IACA,IACA,YAEF,CACE,IACA,IACA,IACA,WAEF,CACE,IACA,GACA,GACA,aAEF,CACE,GACA,EACA,IACA,UAEF,CACE,IACA,IACA,IACA,SAEF,CACE,IACA,IACA,IACA,SAEF,CACE,IACA,IACA,IACA,YAEF,CACE,IACA,IACA,IACA,iBAEF,CACE,IACA,IACA,EACA,aAEF,CACE,IACA,IACA,IACA,gBAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,cAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,wBAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,cAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,eAEF,CACE,GACA,IACA,IACA,iBAEF,CACE,IACA,IACA,IACA,gBAEF,CACE,IACA,IACA,IACA,kBAEF,CACE,IACA,IACA,IACA,kBAEF,CACE,IACA,IACA,IACA,kBAEF,CACE,IACA,IACA,IACA,eAEF,CACE,EACA,IACA,EACA,QAEF,CACE,GACA,IACA,GACA,aAEF,CACE,IACA,IACA,IACA,SAEF,CACE,IACA,EACA,IACA,WAEF,CACE,IACA,EACA,EACA,UAEF,CACE,IACA,IACA,IACA,oBAEF,CACE,EACA,EACA,IACA,cAEF,CACE,IACA,GACA,IACA,gBAEF,CACE,IACA,IACA,IACA,gBAEF,CACE,GACA,IACA,IACA,kBAEF,CACE,IACA,IACA,IACA,mBAEF,CACE,EACA,IACA,IACA,qBAEF,CACE,GACA,IACA,IACA,mBAEF,CACE,IACA,GACA,IACA,mBAEF,CACE,GACA,GACA,IACA,gBAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,YAEF,CACE,IACA,IACA,IACA,eAEF,CACE,EACA,EACA,IACA,QAEF,CACE,IACA,IACA,IACA,WAEF,CACE,IACA,IACA,EACA,SAEF,CACE,IACA,IACA,GACA,aAEF,CACE,IACA,IACA,EACA,UAEF,CACE,IACA,GACA,EACA,aAEF,CACE,IACA,IACA,IACA,UAEF,CACE,IACA,IACA,IACA,iBAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,iBAEF,CACE,IACA,IACA,IACA,iBAEF,CACE,IACA,IACA,IACA,cAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,GACA,QAEF,CACE,IACA,IACA,IACA,QAEF,CACE,IACA,IACA,IACA,QAEF,CACE,IACA,IACA,IACA,cAEF,CACE,IACA,EACA,IACA,UAEF,CACE,IACA,GACA,IACA,iBAEF,CACE,IACA,EACA,EACA,OAEF,CACE,IACA,IACA,IACA,aAEF,CACE,GACA,IACA,IACA,aAEF,CACE,IACA,GACA,GACA,eAEF,CACE,IACA,IACA,IACA,UAEF,CACE,IACA,IACA,GACA,cAEF,CACE,GACA,IACA,GACA,YAEF,CACE,IACA,IACA,IACA,YAEF,CACE,IACA,GACA,GACA,UAEF,CACE,IACA,IACA,IACA,UAEF,CACE,IACA,IACA,IACA,WAEF,CACE,IACA,GACA,IACA,aAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,QAEF,CACE,EACA,IACA,IACA,eAEF,CACE,GACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,OAEF,CACE,EACA,IACA,IACA,QAEF,CACE,IACA,IACA,IACA,WAEF,CACE,IACA,GACA,GACA,UAEF,CACE,GACA,IACA,IACA,aAEF,CACE,IACA,IACA,IACA,UAEF,CACE,IACA,IACA,IACA,SAEF,CACE,IACA,IACA,IACA,SAEF,CACE,IACA,IACA,IACA,cAEF,CACE,IACA,IACA,EACA,UAEF,CACE,IACA,IACA,GACA,gB,6vBCx2BG,SAASC,EAAUD,GAExB,IAAME,EAAmBF,EAAMG,UAAU,GAMzC,GAAID,EAASE,OAAS,EAAG,CACvB,GAAwB,IAApBF,EAASE,OACX,OAnBC,SAA4BJ,GAEjC,OAAO,EAAIA,GAAOK,KAAI,SAACC,GAAS,OAAMA,EAAIA,GAAGC,aAAa,GAC5D,CAgBaC,CAAkBN,GAEzB,IAAMO,EAAMP,EAASQ,MAAM,OAC3B,OAAe,MAAPD,EAAe,CAACA,EAAI,GAAGF,cAAeE,EAAI,GAAGF,cAAeE,EAAI,GAAGF,eAAiB,EAEhG,CAEA,MAAO,EACT,CAwBO,SAASI,EAAgBC,GAE9B,OAAe,QAAXA,aAAG,EAAHA,EAAKC,IAAyB,QAAXD,aAAG,EAAHA,EAAKE,IAAyB,QAAXF,aAAG,EAAHA,EAAKG,GACtC,IAAP,OAAWH,aAAG,EAAHA,EAAKC,EAAEG,SAA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","sources":["webpack://color2name/webpack/universalModuleDefinition","webpack://color2name/webpack/bootstrap","webpack://color2name/webpack/runtime/define property getters","webpack://color2name/webpack/runtime/hasOwnProperty shorthand","webpack://color2name/webpack/runtime/make namespace object","webpack://color2name/./src/data/cssColorSet.ts","webpack://color2name/./src/hex-utils.ts","webpack://color2name/./src/hsl-utils.ts","webpack://color2name/./src/common.ts","webpack://color2name/./src/rgb-utils.ts","webpack://color2name/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"color2name\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"color2name\"] = factory();\n\telse\n\t\troot[\"color2name\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const cssColorSet: RGBCOLORDEF[] = [\n  [\n    240,\n    248,\n    255,\n    \"aliceblue\"\n  ],\n  [\n    250,\n    235,\n    215,\n    \"antiquewhite\"\n  ],\n  [\n    0,\n    255,\n    255,\n    \"aqua\"\n  ],\n  [\n    127,\n    255,\n    212,\n    \"aquamarine\"\n  ],\n  [\n    240,\n    255,\n    255,\n    \"azure\"\n  ],\n  [\n    245,\n    245,\n    220,\n    \"beige\"\n  ],\n  [\n    255,\n    228,\n    196,\n    \"bisque\"\n  ],\n  [\n    0,\n    0,\n    0,\n    \"black\"\n  ],\n  [\n    255,\n    235,\n    205,\n    \"blanchedalmond\"\n  ],\n  [\n    0,\n    0,\n    255,\n    \"blue\"\n  ],\n  [\n    138,\n    43,\n    226,\n    \"blueviolet\"\n  ],\n  [\n    165,\n    42,\n    42,\n    \"brown\"\n  ],\n  [\n    222,\n    184,\n    135,\n    \"burlywood\"\n  ],\n  [\n    95,\n    158,\n    160,\n    \"cadetblue\"\n  ],\n  [\n    127,\n    255,\n    0,\n    \"chartreuse\"\n  ],\n  [\n    210,\n    105,\n    30,\n    \"chocolate\"\n  ],\n  [\n    255,\n    127,\n    80,\n    \"coral\"\n  ],\n  [\n    100,\n    149,\n    237,\n    \"cornflowerblue\"\n  ],\n  [\n    255,\n    248,\n    220,\n    \"cornsilk\"\n  ],\n  [\n    220,\n    20,\n    60,\n    \"crimson\"\n  ],\n  [\n    0,\n    255,\n    255,\n    \"cyan\"\n  ],\n  [\n    0,\n    0,\n    139,\n    \"darkblue\"\n  ],\n  [\n    0,\n    139,\n    139,\n    \"darkcyan\"\n  ],\n  [\n    184,\n    134,\n    11,\n    \"darkgoldenrod\"\n  ],\n  [\n    169,\n    169,\n    169,\n    \"darkgray\"\n  ],\n  [\n    0,\n    100,\n    0,\n    \"darkgreen\"\n  ],\n  [\n    169,\n    169,\n    169,\n    \"darkgrey\"\n  ],\n  [\n    189,\n    183,\n    107,\n    \"darkkhaki\"\n  ],\n  [\n    139,\n    0,\n    139,\n    \"darkmagenta\"\n  ],\n  [\n    85,\n    107,\n    47,\n    \"darkolivegreen\"\n  ],\n  [\n    255,\n    140,\n    0,\n    \"darkorange\"\n  ],\n  [\n    153,\n    50,\n    204,\n    \"darkorchid\"\n  ],\n  [\n    139,\n    0,\n    0,\n    \"darkred\"\n  ],\n  [\n    233,\n    150,\n    122,\n    \"darksalmon\"\n  ],\n  [\n    143,\n    188,\n    143,\n    \"darkseagreen\"\n  ],\n  [\n    72,\n    61,\n    139,\n    \"darkslateblue\"\n  ],\n  [\n    47,\n    79,\n    79,\n    \"darkslategray\"\n  ],\n  [\n    47,\n    79,\n    79,\n    \"darkslategrey\"\n  ],\n  [\n    0,\n    206,\n    209,\n    \"darkturquoise\"\n  ],\n  [\n    148,\n    0,\n    211,\n    \"darkviolet\"\n  ],\n  [\n    255,\n    20,\n    147,\n    \"deeppink\"\n  ],\n  [\n    0,\n    191,\n    255,\n    \"deepskyblue\"\n  ],\n  [\n    105,\n    105,\n    105,\n    \"dimgray\"\n  ],\n  [\n    105,\n    105,\n    105,\n    \"dimgrey\"\n  ],\n  [\n    30,\n    144,\n    255,\n    \"dodgerblue\"\n  ],\n  [\n    178,\n    34,\n    34,\n    \"firebrick\"\n  ],\n  [\n    255,\n    250,\n    240,\n    \"floralwhite\"\n  ],\n  [\n    34,\n    139,\n    34,\n    \"forestgreen\"\n  ],\n  [\n    255,\n    0,\n    255,\n    \"fuchsia\"\n  ],\n  [\n    220,\n    220,\n    220,\n    \"gainsboro\"\n  ],\n  [\n    248,\n    248,\n    255,\n    \"ghostwhite\"\n  ],\n  [\n    255,\n    215,\n    0,\n    \"gold\"\n  ],\n  [\n    218,\n    165,\n    32,\n    \"goldenrod\"\n  ],\n  [\n    128,\n    128,\n    128,\n    \"gray\"\n  ],\n  [\n    0,\n    128,\n    0,\n    \"green\"\n  ],\n  [\n    173,\n    255,\n    47,\n    \"greenyellow\"\n  ],\n  [\n    128,\n    128,\n    128,\n    \"grey\"\n  ],\n  [\n    240,\n    255,\n    240,\n    \"honeydew\"\n  ],\n  [\n    255,\n    105,\n    180,\n    \"hotpink\"\n  ],\n  [\n    205,\n    92,\n    92,\n    \"indianred\"\n  ],\n  [\n    75,\n    0,\n    130,\n    \"indigo\"\n  ],\n  [\n    255,\n    255,\n    240,\n    \"ivory\"\n  ],\n  [\n    240,\n    230,\n    140,\n    \"khaki\"\n  ],\n  [\n    230,\n    230,\n    250,\n    \"lavender\"\n  ],\n  [\n    255,\n    240,\n    245,\n    \"lavenderblush\"\n  ],\n  [\n    124,\n    252,\n    0,\n    \"lawngreen\"\n  ],\n  [\n    255,\n    250,\n    205,\n    \"lemonchiffon\"\n  ],\n  [\n    173,\n    216,\n    230,\n    \"lightblue\"\n  ],\n  [\n    240,\n    128,\n    128,\n    \"lightcoral\"\n  ],\n  [\n    224,\n    255,\n    255,\n    \"lightcyan\"\n  ],\n  [\n    250,\n    250,\n    210,\n    \"lightgoldenrodyellow\"\n  ],\n  [\n    211,\n    211,\n    211,\n    \"lightgray\"\n  ],\n  [\n    144,\n    238,\n    144,\n    \"lightgreen\"\n  ],\n  [\n    211,\n    211,\n    211,\n    \"lightgrey\"\n  ],\n  [\n    255,\n    182,\n    193,\n    \"lightpink\"\n  ],\n  [\n    255,\n    160,\n    122,\n    \"lightsalmon\"\n  ],\n  [\n    32,\n    178,\n    170,\n    \"lightseagreen\"\n  ],\n  [\n    135,\n    206,\n    250,\n    \"lightskyblue\"\n  ],\n  [\n    119,\n    136,\n    153,\n    \"lightslategray\"\n  ],\n  [\n    119,\n    136,\n    153,\n    \"lightslategrey\"\n  ],\n  [\n    176,\n    196,\n    222,\n    \"lightsteelblue\"\n  ],\n  [\n    255,\n    255,\n    224,\n    \"lightyellow\"\n  ],\n  [\n    0,\n    255,\n    0,\n    \"lime\"\n  ],\n  [\n    50,\n    205,\n    50,\n    \"limegreen\"\n  ],\n  [\n    250,\n    240,\n    230,\n    \"linen\"\n  ],\n  [\n    255,\n    0,\n    255,\n    \"magenta\"\n  ],\n  [\n    128,\n    0,\n    0,\n    \"maroon\"\n  ],\n  [\n    102,\n    205,\n    170,\n    \"mediumaquamarine\"\n  ],\n  [\n    0,\n    0,\n    205,\n    \"mediumblue\"\n  ],\n  [\n    186,\n    85,\n    211,\n    \"mediumorchid\"\n  ],\n  [\n    147,\n    112,\n    219,\n    \"mediumpurple\"\n  ],\n  [\n    60,\n    179,\n    113,\n    \"mediumseagreen\"\n  ],\n  [\n    123,\n    104,\n    238,\n    \"mediumslateblue\"\n  ],\n  [\n    0,\n    250,\n    154,\n    \"mediumspringgreen\"\n  ],\n  [\n    72,\n    209,\n    204,\n    \"mediumturquoise\"\n  ],\n  [\n    199,\n    21,\n    133,\n    \"mediumvioletred\"\n  ],\n  [\n    25,\n    25,\n    112,\n    \"midnightblue\"\n  ],\n  [\n    245,\n    255,\n    250,\n    \"mintcream\"\n  ],\n  [\n    255,\n    228,\n    225,\n    \"mistyrose\"\n  ],\n  [\n    255,\n    228,\n    181,\n    \"moccasin\"\n  ],\n  [\n    255,\n    222,\n    173,\n    \"navajowhite\"\n  ],\n  [\n    0,\n    0,\n    128,\n    \"navy\"\n  ],\n  [\n    253,\n    245,\n    230,\n    \"oldlace\"\n  ],\n  [\n    128,\n    128,\n    0,\n    \"olive\"\n  ],\n  [\n    107,\n    142,\n    35,\n    \"olivedrab\"\n  ],\n  [\n    255,\n    165,\n    0,\n    \"orange\"\n  ],\n  [\n    255,\n    69,\n    0,\n    \"orangered\"\n  ],\n  [\n    218,\n    112,\n    214,\n    \"orchid\"\n  ],\n  [\n    238,\n    232,\n    170,\n    \"palegoldenrod\"\n  ],\n  [\n    152,\n    251,\n    152,\n    \"palegreen\"\n  ],\n  [\n    175,\n    238,\n    238,\n    \"paleturquoise\"\n  ],\n  [\n    219,\n    112,\n    147,\n    \"palevioletred\"\n  ],\n  [\n    255,\n    239,\n    213,\n    \"papayawhip\"\n  ],\n  [\n    255,\n    218,\n    185,\n    \"peachpuff\"\n  ],\n  [\n    205,\n    133,\n    63,\n    \"peru\"\n  ],\n  [\n    255,\n    192,\n    203,\n    \"pink\"\n  ],\n  [\n    221,\n    160,\n    221,\n    \"plum\"\n  ],\n  [\n    176,\n    224,\n    230,\n    \"powderblue\"\n  ],\n  [\n    128,\n    0,\n    128,\n    \"purple\"\n  ],\n  [\n    102,\n    51,\n    153,\n    \"rebeccapurple\"\n  ],\n  [\n    255,\n    0,\n    0,\n    \"red\"\n  ],\n  [\n    188,\n    143,\n    143,\n    \"rosybrown\"\n  ],\n  [\n    65,\n    105,\n    225,\n    \"royalblue\"\n  ],\n  [\n    139,\n    69,\n    19,\n    \"saddlebrown\"\n  ],\n  [\n    250,\n    128,\n    114,\n    \"salmon\"\n  ],\n  [\n    244,\n    164,\n    96,\n    \"sandybrown\"\n  ],\n  [\n    46,\n    139,\n    87,\n    \"seagreen\"\n  ],\n  [\n    255,\n    245,\n    238,\n    \"seashell\"\n  ],\n  [\n    160,\n    82,\n    45,\n    \"sienna\"\n  ],\n  [\n    192,\n    192,\n    192,\n    \"silver\"\n  ],\n  [\n    135,\n    206,\n    235,\n    \"skyblue\"\n  ],\n  [\n    106,\n    90,\n    205,\n    \"slateblue\"\n  ],\n  [\n    112,\n    128,\n    144,\n    \"slategray\"\n  ],\n  [\n    112,\n    128,\n    144,\n    \"slategrey\"\n  ],\n  [\n    255,\n    250,\n    250,\n    \"snow\"\n  ],\n  [\n    0,\n    255,\n    127,\n    \"springgreen\"\n  ],\n  [\n    70,\n    130,\n    180,\n    \"steelblue\"\n  ],\n  [\n    210,\n    180,\n    140,\n    \"tan\"\n  ],\n  [\n    0,\n    128,\n    128,\n    \"teal\"\n  ],\n  [\n    216,\n    191,\n    216,\n    \"thistle\"\n  ],\n  [\n    255,\n    99,\n    71,\n    \"tomato\"\n  ],\n  [\n    64,\n    224,\n    208,\n    \"turquoise\"\n  ],\n  [\n    238,\n    130,\n    238,\n    \"violet\"\n  ],\n  [\n    245,\n    222,\n    179,\n    \"wheat\"\n  ],\n  [\n    255,\n    255,\n    255,\n    \"white\"\n  ],\n  [\n    245,\n    245,\n    245,\n    \"whitesmoke\"\n  ],\n  [\n    255,\n    255,\n    0,\n    \"yellow\"\n  ],\n  [\n    154,\n    205,\n    50,\n    \"yellowgreen\"\n  ]\n]\n\nexport default cssColorSet","/**\n * It returns an object with the hex values of the 3 digit hex color\n *\n * @param {string} value 3 digit hex\n * @return {string[]} 6 digit hex\n */\nexport function shortHexToLongHex (value: string): string[] {\n  // split the string in to an array of digits then return an array that contains that digit doubled for each item\n  return [...value].map((v: string) => (v + v).toUpperCase())\n}\n\n/**\n *\n * @param value\n */\nexport function parseHex (value: colorString): string[] {\n  // remove # at the beginning of the hex color\n  const hexColor: string = value.substring(1)\n\n  /**\n   * then if the number of digits is greater than 2 (so it's something like 123 or abc456)\n   * breakdown the string into an object that contains the r g and b values in hex\n   */\n  if (hexColor.length > 2) {\n    if (hexColor.length === 3) {\n      return shortHexToLongHex(hexColor)\n    } else {\n      const hex = hexColor.match(/../g)\n      return (hex != null) ? [hex[0].toUpperCase(), hex[1].toUpperCase(), hex[2].toUpperCase()] : []\n    }\n  }\n\n  return []\n}\n\n/**\n * Convert a Hex color to rgb\n *\n * @param {string} hex without the \"#\"\n */\nexport function hexToRgb (hex: string[]): RGBVALUE | Error {\n  // Extract the RGB values from the hex string\n  if (hex.length >= 2) {\n    return {\n      r: parseInt(hex[0], 16),\n      g: parseInt(hex[1], 16),\n      b: parseInt(hex[2], 16)\n    }\n  }\n  throw new Error(`Invalid Hex color: ${hex.join(', ')}`)\n}\n\n/**\n* Convert rgb values to hex color\n*\n* @param {Object} rgb an object with the rgb values\n*/\nexport function RgbValuesToHex (rgb: RGBVALUE): HEX {\n  // Extract the RGB values from the hex string\n  if (rgb?.r !== null && rgb?.g !== null && rgb?.b !== null) {\n    return `#${rgb?.r.toString(16)}${rgb?.g.toString(16)}${rgb?.b.toString(16)}`\n  }\n  return '#errorr'\n}\n","import { convertToInt8, hslRegex, splitValues } from './common'\n\n/**\n *\n * @param value\n */\nexport function parseHsl (hslAsString: string): string[] {\n  const hslvalue = hslAsString.match(hslRegex)\n  if (hslvalue != null) {\n    const hsl: string[] = splitValues(hslvalue[1])\n\n    if (hsl.length >= 2) {\n      return [\n        hsl[0],\n        hsl[1],\n        hsl[2]\n      ]\n    }\n  }\n  throw new Error(`Can't parse hsl color: ${hslAsString}`)\n}\n\nexport function getHslValues (hsl: string[]): HSLVALUE {\n  if (hsl.length >= 2) {\n    return {\n      h: convertToInt8(hsl[0]),\n      s: convertToInt8(hsl[1], 100),\n      l: convertToInt8(hsl[2], 100)\n    }\n  }\n  throw new Error(`Invalid hsl color: ${hsl.join(', ')}`)\n}\n\n/**\n * Parses an array of HSL values and the related RGB value\n *\n * @param hsl the HSL value to parse\n * @return {Object} rgb value\n */\nexport function hslToRgb (hsl: string[]): RGBVALUE {\n  if (hsl === null || hsl.length < 2) {\n    throw new Error(`Invalid hsl color: ${hsl.join(', ')}`)\n  }\n\n  let {\n    h,\n    s,\n    l\n  } = getHslValues(hsl)\n\n  // Must be fractions of 1\n  s /= 100\n  l /= 100\n\n  const c = (1 - Math.abs(2 * l - 1)) * s\n  const x = c * (1 - Math.abs((h / 60) % 2 - 1))\n  const m = l - c / 2\n  let r = 0\n  let g = 0\n  let b = 0\n\n  if (h >= 0 && h < 60) {\n    r = c; g = x; b = 0\n  } else if (h >= 60 && h < 120) {\n    r = x; g = c; b = 0\n  } else if (h >= 120 && h < 180) {\n    r = 0; g = c; b = x\n  } else if (h >= 180 && h < 240) {\n    r = 0; g = x; b = c\n  } else if (h >= 240 && h < 300) {\n    r = x; g = 0; b = c\n  } else if (h >= 300 && h < 360) {\n    r = c; g = 0; b = x\n  }\n  r = Math.round((r + m) * 255)\n  g = Math.round((g + m) * 255)\n  b = Math.round((b + m) * 255)\n\n  return { r, g, b }\n}\n","// Regular expressions to match different color formats\nimport {hexToRgb, parseHex, RgbValuesToHex} from './hex-utils'\nimport { getRgbValues, parseRgb } from './rgb-utils'\nimport { hslToRgb, parseHsl } from './hsl-utils'\n\nexport const hexRegex = /^#([\\da-f]{6}|[\\da-f]{3})/i\nexport const rgbRegex = /^rgba?\\(([^)]+)\\)/i\nexport const hslRegex = /^hsla?\\(([^)]+)\\)/i\nexport const isNumeric = /^[0-9]*$/\n\n/**\n * split the content of rgb and hsl colors depending on the parsed value of the css property\n *\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb#syntax\n *\n * @param rawValues\n */\nexport function splitValues (rawValues: string): string[] {\n  if (rawValues.includes(',')) {\n    return rawValues.split(/[,\\\\/]/).map(val => val.trim())\n  }\n\n  return rawValues.split(/[ \\\\/]/).map(val => val.trim()).filter(Boolean)\n}\n\n/**\n * takes a string with a css value that could be a number or percentage or an angle in degrees and returns the corresponding 8bit value\n *\n * @param value\n */\nexport function convertToInt8 (value: string, multiplier: number = 255): number {\n  value = value.trim()\n  if (isNumeric.test(value)) {\n    // If the value is an int number return it as number\n    return parseInt(value, 10)\n  } else if (value.endsWith('%')) {\n    // If the value is a percentage, divide it by 100 to get a value from 0 to 1\n    // and then multiply it by 255 to get a value from 0 to 255\n    return parseFloat(value) / 100 * multiplier\n  } else if (value.endsWith('deg')) {\n    // If the value is an angle in degrees, convert it to the 0-360 range\n    // and then divide it by 360 to get a value from 0 to 1\n    // and then multiply it by 255 to get a value from 0 to 255\n    let angle = parseFloat(value)\n    while (angle < 0) {\n      angle += 360\n    }\n    while (angle > 360) {\n      angle -= 360\n    }\n    return angle / 360 * multiplier\n  } else {\n    // If the value is not a percentage or an angle in degrees, it is invalid\n    throw new Error(`Invalid value: ${value}`)\n  }\n}\n\n/**\n * This function takes a string representing a color (color) and uses regular expressions to check if it matches any of the following formats: hex, hex+alpha, RGB, RGBA, HSL, or HSLA.\n * If the color string matches one of these formats, the function returns an object with the type of color and the value of the color.\n * If the color string does not match any of the formats, the function throws an error.\n *\n * @param colorString\n */\nexport function parseColor (colorString: colorString | string): RGBVALUE | Error {\n  // Check if the color string matches any of the regular expressions\n  if (hexRegex.test(colorString)) {\n    const hex = parseHex(colorString as HEX)\n    if (hex.length > 0) {\n      return hexToRgb(hex)\n    }\n  } else if (rgbRegex.test(colorString)) {\n    const rgb = parseRgb(colorString as RGB)\n    if (rgb.length > 0) {\n      return getRgbValues(rgb)\n    }\n  } else if (hslRegex.test(colorString)) {\n    const hsl = parseHsl(colorString as HSL)\n    if (hsl.length > 0) {\n      return hslToRgb(hsl)\n    }\n  }\n\n  // If the color string does not match any of the regular expressions, return an error\n  throw new Error(`Invalid color: ${colorString}`)\n}\n\nexport function RgbToHex (rgbString: RGB): HEX | Error {\n  if (rgbRegex.test(rgbString)) {\n    const rgb = parseRgb(rgbString)\n    if (rgb.length > 0) {\n      const RgbValues = getRgbValues(rgb)\n      return RgbValuesToHex(RgbValues)\n    }\n  }\n  throw new Error(`Invalid color: ${rgbString}`)\n}\n","import { convertToInt8, rgbRegex, splitValues } from './common'\n\n/**\n *\n * @param rgbAsString - the rgb color as string to convert\n */\nexport function parseRgb (rgbAsString: string): string[] {\n  const rgbvalue = rgbAsString.match(rgbRegex)\n  if (rgbvalue != null) {\n    const rgb: string[] = splitValues(rgbvalue[1])\n\n    if (rgb.length >= 2) {\n      return [\n        rgb[0],\n        rgb[1],\n        rgb[2]\n      ]\n    }\n  }\n  throw new Error(`Can't parse rgb color: ${rgbAsString}`)\n}\n\n/**\n *\n * @param rgb - rgb value\n */\nexport function getRgbValues (rgb: string[]): RGBVALUE {\n  if (rgb.length >= 2) {\n    return {\n      r: convertToInt8(rgb[0]),\n      g: convertToInt8(rgb[1]),\n      b: convertToInt8(rgb[2])\n    }\n  }\n  throw new Error(`Invalid rgb color: ${rgb.join(', ')}`)\n}\n","import cssColorSet from './data/cssColorSet'\nimport { parseColor } from './common'\nimport { RgbValuesToHex } from './hex-utils'\n\n/**\n * Given a color string it returns the closest corresponding name of the color\n *\n * @param color\n * @param colorSet\n * @param args\n * @param args.colors\n *\n * @return {string} the corresponding color name\n */\nfunction closest (\n  color: colorString,\n  colorSet: RGBCOLORDEF[] | undefined = cssColorSet,\n  ...args: any[ string | number ]\n): COLORDEF | COLORDEFINFO {\n  let closestGap = Number.MAX_SAFE_INTEGER\n  const closestColor: COLORDEF = { name: 'error', color: '#F00' }\n\n  if (colorSet.length < 1) {\n    return closestColor\n  }\n\n  const rgbColorValues = Object.values(parseColor(color))\n  if (rgbColorValues.length > 2) {\n    for (const tested of colorSet) {\n      const gap = distance(rgbColorValues as RGBDEF, tested)\n      if (gap < closestGap) {\n        closestGap = gap\n        closestColor.name = tested[3]\n        closestColor.color = `rgb(${tested[0]},${tested[1]},${tested[2]})`\n      }\n\n      if (gap === 0) {\n        break\n      }\n    }\n  }\n\n  if (args?.length > 0) {\n    if (args?.info !== null) {\n      const rgbValue = parseColor(closestColor.color)\n      const hexValue = RgbValuesToHex(rgbValue as RGBVALUE)\n      return { ...closestColor, hex: hexValue, gap: closestGap }\n    }\n  }\n\n  return closestColor\n}\n\n/**\n * Calculate the distance between the two RGB values\n * it's possible to remove the square root but the result will be result^2\n * Since nowadays the difference of time to calc a square root or not is almost indifferent, I preferred to keep the result more accurate.\n *\n * @param rgb1\n * @param rgb2\n */\nfunction distance (rgb1: RGBDEF, rgb2: RGBCOLORDEF): number {\n  return Math.sqrt(\n    Math.pow(rgb2[0] - rgb1[0], 2) +\n        Math.pow(rgb2[1] - rgb1[1], 2) +\n        Math.pow(rgb2[2] - rgb1[2], 2)\n  )\n}\n\nexport {\n  cssColorSet,\n  closest,\n  distance\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","parseHex","hexColor","substring","length","map","v","toUpperCase","shortHexToLongHex","hex","match","RgbValuesToHex","rgb","r","g","b","toString","hslToRgb","hsl","Error","join","h","convertToInt8","s","l","getHslValues","c","Math","abs","x","m","round","hexRegex","rgbRegex","hslRegex","isNumeric","splitValues","rawValues","includes","split","val","trim","filter","Boolean","multiplier","test","parseInt","endsWith","parseFloat","angle","parseColor","colorString","hexToRgb","rgbAsString","rgbvalue","parseRgb","getRgbValues","hslAsString","hslvalue","parseHsl","closest","color","colorSet","cssColorSet","closestGap","Number","MAX_SAFE_INTEGER","closestColor","name","rgbColorValues","values","tested","gap","distance","args","info","rgbValue","hexValue","rgb1","rgb2","sqrt","pow"],"sourceRoot":""}